snippet ef
export function $1($2) {
  $0
}
endsnippet

snippet ec
export const $0;
endsnippet

snippet el
export let $0;
endsnippet

snippet est
export const $1 = writable($0);
endsnippet

snippet fori
for (var i = 0; i < $1; i++) {
  $0
}
endsnippet

snippet forobj
for (const [key, value] of Object.entries(${1:obj})) {
  $0
}
endsnippet

snippet isarr
Array.isArray($1)$0
endsnippet

snippet cl
console.log($0);
endsnippet

snippet case
case "$1": {
  $0
  break;
}
endsnippet


###### React ######
snippet rfc
export default function `!p snip.rv=snip.basename[:1].upper() + snip.basename[1:]`($1) {
  return (
    <>
      $0
    </>
  );
}
endsnippet

snippet rfcc
import c from "./styles/`!p snip.rv = snip.basename`.module.scss";

export default function `!p snip.rv=snip.basename[:1].upper() + snip.basename[1:]`($1) {
  return (
    <>
      $0
    </>
  );
}
endsnippet

snippet rus
const [$1, set`!p snip.rv=t[1][:1].upper() + t[1][1:]`] = React.useState($0);
endsnippet

snippet us
const [$1, set`!p snip.rv=t[1][:1].upper() + t[1][1:]`] = useState($0);
endsnippet

snippet urt
const [$1, toggle`!p snip.rv=t[1][:1].upper() + t[1][1:]`] = useReducer((s) => !s, ${0:false});
endsnippet

snippet rue
React.useEffect(() => {
  $0
}, [$1]);
endsnippet

snippet ue
useEffect(() => {
  $0
}, [$1]);
endsnippet

snippet context
import { createContext, useContext } from "react";

const $1Context = createContext();

export const use$1 = () => {
  return useContext($1Context);
};

export function $1Provider({ children }) {
  return (
    <$1Context.Provider
      value={{
        $0
      }}
    >
      {children}
    </$1Context.Provider>
  );
}
endsnippet


# SVELTE

snippet props
interface Props {
  $0
}
const props: Props = $props();
endsnippet

snippet cle
$effect(() => console.log($0));
endsnippet

snippet mdi
import $0Icon from "virtual:icons/mdi/$1";
endsnippet

