extends javascript

snippet scr
<script lang="ts">
  $0
</script>
endsnippet
snippet !
<script lang="ts">
  $0
</script>
endsnippet
snippet ts
<script lang="ts">
  $0
</script>
endsnippet

snippet scrchildren
<script lang="ts">
  import type { Snippet } from "svelte";

  interface Props {
    children?: Snippet;
  }

  const { children }: Props = $props();
</script>

{#if children}
  {@render children()}
{/if}
endsnippet

snippet js
<script>
  $0
</script>
endsnippet

snippet css
<style>
  $0
</style>
endsnippet

snippet sass
<style lang="sass">
  $0
</style>
endsnippet

snippet scss
<style lang="scss">
  $0
</style>
endsnippet

snippet each
{#each $1 as $2}
  $0
{/each}
endsnippet

snippet if
{#if $1}
  $0
{/if}
endsnippet

snippet ife
{#if $1}
  $0
{:else}
{/if}
endsnippet

snippet else
{:else}
  $0
endsnippet

snippet can
<canvas bind:this={canvas} />
endsnippet

snippet canc
<script lang="ts">
  import { onMount } from "svelte";

  export let width: number, height: number;

  let canvas: HTMLCanvasElement,
    ctx: CanvasRenderingContext2D,
    rafId: number,
    lastT = 0;

  function draw(t: number) {
    let dt = t - lastT;

    rafId = requestAnimationFrame(draw);
    lastT = t;
  }

  onMount(() => {
    ctx = canvas.getContext("2d") as CanvasRenderingContext2D;

    $0

    rafId = requestAnimationFrame(draw);
    return () => cancelAnimationFrame(rafId);
  });
</script>

<canvas bind:this={canvas} {width} {height} />
endsnippet

snippet in
<input type="text" bind:value={$0} />
endsnippet

snippet la
<label>
  <input type="text" bind:value={$0} />
</label>
endsnippet

snippet compMuist
<script lang="ts">
  import { cva } from "class-variance-authority";
  import type { Snippet } from "svelte";

  type Props = {
    children?: Snippet;
  }

  let { children, ...props }: Props = $props();

  const styleProps = $derived({});

  const Styles = cva("", {
    variants: {},
  });

  const backgroundStyles = cva("overlay", { variants: {}, });
  const borderStyles = cva("overlay", { variants: {}, });
  const stateLayerStyles = cva("state-layer", { variants: {}, });
</script>

<div class="relative">
  <div class={backgroundStyles(styleProps)}></div>
  <div class={borderStyles(styleProps)}></div>
  <div class={stateLayerStyles(styleProps)}></div>

  <div class={Styles(styleProps)} {...props}>
    {@render children?.()}
  </div>
</div>
endsnippet

snippet snip
{#snippet $1()}
  $0
{/snippet}
endsnippet

snippet story
<script lang="ts" module>
  import { defineMeta, setTemplate, type Args } from "@storybook/addon-svelte-csf";
  import $1 from "./$1.svelte";

  /**
   *
   */
  const { Story } = defineMeta({
    component: $1,
  });
</script>

<script lang="ts">
  setTemplate(template);
</script>

{#snippet template({ ...args }: Args<typeof Story>)}
  <$1 {...args} />
{/snippet}

<Story name="Default" />
endsnippet
